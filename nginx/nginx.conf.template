worker_processes 1;

events { 
    worker_connections 1024; 
    }

http {
  include mime.types;

  # Logging with upstream info
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" '
                    'upstream: $upstream_addr '
                    'upstream_status: $upstream_status '
                    'request_time: $request_time '
                    'upstream_response_time: $upstream_response_time';

                    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

     # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    
    # Security
    server_tokens off;
    client_max_body_size 10m;



  upstream backend {
    
    ${UPSTREAM_ENTRIES}

    keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
  }

  server {
    listen 80 default_server;
    server_name _;

#Timeouts
    proxy_connect_timeout 2s;
    proxy_send_timeout 10s;
    proxy_read_timeout 30s;
    proxy_buffering off;

    #failover configuration
    proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    proxy_next_upstream_tries 2;
    proxy_next_upstream_timeout 5s;

    location / {

      proxy_pass http://backend;
      
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      # DO NOT hide X-App-Pool or X-Release-Id
    }

    location /healthz {
      proxy_pass http://backend/healthz;
      proxy_set_header Host $host;

      proxy_connect_timeout 1s;
            proxy_read_timeout 2s;
    }

    location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
  }
  
}
